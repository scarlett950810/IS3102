<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
                template="./../templates/DefaultTemplate.xhtml"
                xmlns:p="http://primefaces.org/ui"
                xmlns:h="http://xmlns.jcp.org/jsf/html"
                xmlns:f="http://xmlns.jcp.org/jsf/core">
    <ui:define name="head">

    </ui:define>

    <ui:define name="title">Planning - Add Route</ui:define>

    <ui:define name="menubar">
        <div id="sidebar-wrapper">
            <ul class="sidebar-nav">
                <li class="sidebar-h1"><a href="planningAddAircraft.xhtml">Fleet Planning</a></li>
                <li><a href="planningAircraftType.xhtml">Manage Aircraft Type</a></li>
                <li><a href="planningEditDeleteAircraft.xhtml">Manage Aircraft</a></li>


                <li class="sidebar-h1"><a href="planningAddRoute.xhtml">Route Planning</a></li>
                <li><a href="planningAirport.xhtml">Manage Airport</a></li>
                <li><a href="planningRoute.xhtml">Manage Route</a></li>

                <li class="sidebar-h1"><a href="planningSetFrequency.xhtml">Schedule Development </a></li>
                <li class="sidebar-h1"><a style="#{fleetAssignmentManagedBean.color}" href="planningFleetAssignment.xhtml">Fleet Assignment</a></li>
            </ul>
        </div>
    </ui:define>

    <ui:define name="centerPanel">

        <h:form id="addRouteForm">
            <p:growl id="msgs" showDetail="true" />

            <p:panel header="Connect hub and spoke to generate return routes" style="margin-bottom:10px;" class="panel panel-success">
                
                <h:outputText value="take note that the chosen two airports cannot be both spokes" />   

                <h:panelGrid columns="2" cellpadding="5">
                    
                    <p:outputLabel for="hub" value="Hub: " />
                    <p:selectOneMenu id="hub" value="#{routeManagedBean.hub}" required="true">
                        <p:ajax onsuccess="doUpdateHub()" />
                        <f:selectItem itemLabel="Select Hub" itemDisabled="true" />
                        <f:selectItems value="#{routeManagedBean.hubs}" />
                    </p:selectOneMenu>

                    <p:outputLabel for="spoke" value="City: " />
                    <p:selectOneMenu id="spoke" value="#{routeManagedBean.spoke}" required="true">
                        <p:ajax onsuccess="doUpdateSpoke()" />
                        <f:selectItem itemLabel="Select City" itemDisabled="true" />
                        <f:selectItems value="#{routeManagedBean.spokes}" />
                    </p:selectOneMenu>
                     
                    </h:panelGrid>
                
                    <h:panelGrid columns="5" cellpadding="5">
                        
                    <p:outputLabel for="distance" value="Distance (mile): " />
                    <p:inputText id="distance" value="#{routeManagedBean.distance}" required="true" />

                    <h:outputText class="footnote" value="Direct distance is " />
                    <h:outputText class="footnote" id="directDistance" />
                    <h:outputText class="footnote" value=" miles." />
                    
                </h:panelGrid>

                <div id="map-canvas" style="width: 100%; height: 60%;"></div>

                <p:separator />

                <p:commandButton value="Connect" update="msgs" actionListener="#{routeManagedBean.generateRoutes}"
                                 icon="ui-icon-check" class="btn-sm btn-success"/>

                <script type="text/javascript">
                    //<![CDATA[
                    var map;
                    var hubMarker;
                    var spokeMarker;
                    var distance; // distance in mile

                    function updateHub() {
                        var hub = $('#addRouteForm\\:hub_input').val();
                        hubMarker.setMap(map);
                        codeAddress(hubMarker, hub);
                    }

                    function doUpdateHub() {
                        updateHub();
                        setTimeout(adjustView(), 3000);
                        setTimeout(updateDistance(), 3000);
                    }

                    function updateSpoke() {
                        var spoke = $('#addRouteForm\\:spoke_input').val();
                        spokeMarker.setMap(map);
                        codeAddress(spokeMarker, spoke);
                    }

                    function doUpdateSpoke() {
                        updateSpoke();
                        setTimeout(adjustView(), 3000);
                        setTimeout(updateDistance(), 3000);
                    }
                    function initialize() {

                        geocoder = new google.maps.Geocoder();
                        var latlng = new google.maps.LatLng(1.3000, 103.8000);
                        var mapOptions =
                                {
                                    zoom: 8,
                                    center: latlng
                                }
                        map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
                        hubMarker = new google.maps.Marker(
                                {
                                    map: map,
                                    label: "Hub selected",
                                    icon: "../resources/img/addRoute/hub.png"
                                });
                        spokeMarker = new google.maps.Marker(
                                {
                                    map: map,
                                    label: "Spoke selected",
                                    icon: "../resources/img/addRoute/spoke.png"
                                });
                    }

                    function codeAddress(marker, address) {

                        geocoder.geocode({address: address}, function (results, status)
                        {
                            if (status === google.maps.GeocoderStatus.OK)
                            {

                                map.setCenter(results[0].geometry.location);//center the map over the result

                                marker.setPosition(results[0].geometry.location);

                            } else {
                                alert(address + " is not found. Please check the airport name.");
                                marker.setMap(null);
                            }
                        });
                    }

                    function adjustView() {
                        console.log("adjustview called");
                        console.log("hubMarker position = " + hubMarker.getPosition());
                        console.log("spokeMarker position = " + spokeMarker.getPosition());

                        if (hubMarker.getPosition() !== undefined && spokeMarker.getPosition() !== undefined) {

                            var bounds = new google.maps.LatLngBounds();
//                            console.log(bounds);
                            bounds.extend(hubMarker.getPosition());
                            bounds.extend(spokeMarker.getPosition());

                            map.fitBounds(bounds);
                        }

                    }

                    // calculate distance according to latitute and longitude of two airports
                    function updateDistance() {
                        if (hubMarker.getPosition() !== undefined && spokeMarker.getPosition() !== undefined) {
                            var lat1 = hubMarker.getPosition().lat();
                            var lon1 = hubMarker.getPosition().lng();
                            var lat2 = spokeMarker.getPosition().lat();
                            var lon2 = spokeMarker.getPosition().lng();
                            
                            var R = 6371; // Radius of the earth in km
                            var dLat = deg2rad(lat2 - lat1);  // deg2rad below
                            var dLon = deg2rad(lon2 - lon1);
                            var a =
                                    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                                    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
                                    Math.sin(dLon / 2) * Math.sin(dLon / 2)
                                    ;
                            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                            var distanceInKm = R * c; // Distance in km
                            distance = distanceInKm / 1.609344; // convert km into miles
                            distance = Math.round(distance * 100) / 100; // round to 2 decimal
                            
                            $('#addRouteForm\\:directDistance').html(distance);
                        }

                    }

                    function deg2rad(deg) {
                        return deg * (Math.PI / 180);
                    }
                    //]]>
                </script>

                <script src="https://maps.googleapis.com/maps/api/js?callback=initialize" async="async" defer="defer"></script>

            </p:panel>
        
        </h:form>
    
    </ui:define>

</ui:composition>

